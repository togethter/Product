//
//  ScanResultViewController.m
//  LBXScanDemo
//
//  Created by lbxia on 15/11/17.
//  Copyright © 2015年 lbxia. All rights reserved.
//

#import "ScanResultViewController.h"
#define appModel @"YLJSWithdrawalDetail"

@interface ScanResultViewController ()<WKNavigationDelegate, WKUIDelegate,WKScriptMessageHandler>

//父视图
@property (weak, nonatomic) IBOutlet UIView *V_bg;

//提示文字
@property (weak, nonatomic) IBOutlet UILabel *L_iconTitle;

@property (weak, nonatomic) IBOutlet UIView *V_headRoot;


@property (nonatomic, strong) WKWebView *webViews;



@end

@implementation ScanResultViewController


- (void)viewDidLoad {
    [super viewDidLoad];
    self.navigationItem.title = @"二维码";
    
    // Do any additional setup after loading the view from its nib.
    if ([self respondsToSelector:@selector(setEdgesForExtendedLayout:)]) {
        
        self.edgesForExtendedLayout = UIRectEdgeNone;
    }
    [self creatUI];
    self.V_bg.backgroundColor = BACKCOLOR;
    self.V_headRoot.layer.cornerRadius = 5.0f;
    self.V_headRoot.layer.masksToBounds = YES;
    self.webViews.scrollView.bounces = NO;

    
    
}
-(void)creatUI{
    WKWebViewConfiguration *config = [[WKWebViewConfiguration alloc] init];
    
    // 设置偏好设置
    config.preferences = [[WKPreferences alloc] init];
    // 默认为0
    config.preferences.minimumFontSize = 10;
    // 默认认为YES
    config.preferences.javaScriptEnabled = YES;
    // 在iOS上默认为NO，表示不能自动通过窗口打开
    config.preferences.javaScriptCanOpenWindowsAutomatically = NO;
    
    // web内容处理池
    config.processPool = [[WKProcessPool alloc] init];
    
    // 通过JS与webview内容交互
    config.userContentController = [[WKUserContentController alloc] init];
    // 注入JS对象名称AppModel，当JS通过AppModel来调用时，
    // 我们可以在WKScriptMessageHandler代理中接收到
//    [config.userContentController addScriptMessageHandler:self name:@"AppModel"];
    
    self.webViews = [[WKWebView alloc] initWithFrame:CGRectMake(0, 66+20, kScreenWidth-40, self.V_headRoot.size.height-66)
                                      configuration:config];

    NSURL *url = [NSURL fileURLWithPath:[[NSBundle mainBundle] pathForResource:@"qr_result" ofType:@"html" inDirectory:@"iosqrcoderesult1"]];
    [self.webViews loadRequest:[NSURLRequest requestWithURL:url]];
    
    [self.V_headRoot addSubview:self.webViews];
    
    // 导航代理
    self.webViews.navigationDelegate = self;
    // 与webview UI交互代理
    self.webViews.UIDelegate = self;
    
    // 添加KVO监听
    [self.webViews addObserver:self
                   forKeyPath:@"loading"
                      options:NSKeyValueObservingOptionNew
                      context:nil];
//    [self.webViews addObserver:self
//                   forKeyPath:@"title"
//                      options:NSKeyValueObservingOptionNew
//                      context:nil];
//    [self.webViews addObserver:self
//                   forKeyPath:@"estimatedProgress"
//                      options:NSKeyValueObservingOptionNew
//                      context:nil];
    
    // 添加进入条
//    self.progressView = [[UIProgressView alloc] init];
//    self.progressView.frame = self.view.bounds;
//    [self.view addSubview:self.progressView];
//    self.progressView.backgroundColor = [UIColor redColor];
    
//    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"后退" style:UIBarButtonItemStyleDone target:self action:@selector(goback)];
//    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"前进" style:UIBarButtonItemStyleDone target:self action:@selector(gofarward)];
}
- (void)goback {
    if ([self.webViews canGoBack]) {
        [self.webViews goBack];
    }
}

- (void)gofarward {
    if ([self.webViews canGoForward]) {
        [self.webViews goForward];
    }
}
#pragma mark - WKScriptMessageHandler
- (void)userContentController:(WKUserContentController *)userContentController
      didReceiveScriptMessage:(WKScriptMessage *)message {
    if ([message.name isEqualToString:@"AppModel"]) {
        // 打印所传过来的参数，只支持NSNumber, NSString, NSDate, NSArray,
        // NSDictionary, and NSNull类型
        DLog(@"%@", message.body);
    }
}
- (void)webView:(WKWebView *)webView didFinishNavigation:(null_unspecified WKNavigation *)navigation
{
    NSDictionary * dic = @{@"Result":@"200",@"Message":_strScan};
    NSString *jjj  = [NSString stringWithFormat:@"getData(%@)",[self convertToJsonData:dic]];
    
    [self.webViews evaluateJavaScript:jjj completionHandler:^(id _Nullable response, NSError * _Nullable error) {
        DLog(@"response: %@ error: %@", response, error);
        DLog(@"call js alert by native");
    }];
}

#pragma mark - KVO
- (void)observeValueForKeyPath:(NSString *)keyPath
                      ofObject:(id)object
                        change:(NSDictionary<NSString *,id> *)change
                       context:(void *)context {
//    if ([keyPath isEqualToString:@"loading"]) {
//        NSLog(@"loading");
//    } else if ([keyPath isEqualToString:@"title"]) {
//        self.title = self.webViews.title;
//    } else if ([keyPath isEqualToString:@"estimatedProgress"]) {
//        NSLog(@"progress: %f", self.webViews.estimatedProgress);
//        self.progressView.progress = self.webViews.estimatedProgress;
////    }
//
//    // 加载完成
//    if (!self.webViews.loading) {
//        // 手动调用JS代码
//        // 每次页面完成都弹出来，大家可以在测试时再打开
//
//        NSDictionary * dic = @{@"Result":@"200",@"Message":_strScan};
//        NSString *jjj  = [NSString stringWithFormat:@"getData(%@)",[self convertToJsonData:dic]];
//
//        [self.webViews evaluateJavaScript:jjj completionHandler:^(id _Nullable response, NSError * _Nullable error) {
//            DLog(@"response: %@ error: %@", response, error);
//            DLog(@"call js alert by native");
//        }];
//
////        [UIView animateWithDuration:0.5 animations:^{
////            self.progressView.alpha = 0;
////        }];
//    }
}
-(NSString *)convertToJsonData:(NSDictionary *)dict

{
    
    NSError *error;
    
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dict options:NSJSONWritingPrettyPrinted error:&error];
    
    NSString *jsonString;
    
    if (!jsonData) {
        
        NSLog(@"%@",error);
        
    }else{
        
        jsonString = [[NSString alloc]initWithData:jsonData encoding:NSUTF8StringEncoding];
        
    }
    
    NSMutableString *mutStr = [NSMutableString stringWithString:jsonString];
    
    NSRange range = {0,jsonString.length};
    
    //去掉字符串中的空格
    
    [mutStr replaceOccurrencesOfString:@" " withString:@"" options:NSLiteralSearch range:range];
    
    NSRange range2 = {0,mutStr.length};
    
    //去掉字符串中的换行符
    
    [mutStr replaceOccurrencesOfString:@"\n" withString:@"" options:NSLiteralSearch range:range2];
    
    return mutStr;
    
}

-(void)downLoad{
    
    [self netWorkHelperWithPOST:ScanCodeMsg parameters:nil success:^(id responseObject) {
        BaseModel * model = [BaseModel loadModelWithDictionary:responseObject];

        if ([model.Result isEqualToString:@"200"]) {
            if (IS_VALID_STRING(model.Message)) {
                
                self.L_iconTitle.text = model.Message;
            }
           
            
        }
        
        
    } failure:^(NSError *error) {
      
        
    }];
    
}
- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [self downLoad];

}
-(void)viewWillDisappear:(BOOL)animated{
    [super viewWillDisappear:animated];
    [self.webViews removeObserver:self forKeyPath:@"loading"];
    
}


@end
